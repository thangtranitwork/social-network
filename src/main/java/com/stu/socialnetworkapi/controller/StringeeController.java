package com.stu.socialnetworkapi.controller;

import com.stu.socialnetworkapi.dto.response.StringeeResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.UUID;

@RestController
@RequestMapping("/v1/stringee")
@RequiredArgsConstructor
public class StringeeController {

    @GetMapping("/answer")
    public ResponseEntity<List<StringeeResponse>> handleAnswerUrl(Map<String, Object> payload) {
        System.out.println("=== Stringee Answer URL Called ===");
        System.out.println("Payload: " + payload);

        try {
            // L·∫•y th√¥ng tin t·ª´ payload
            String fromStr = payload.get("from").toString();
            String toStr = payload.get("to").toString();

            System.out.println("From: " + fromStr);
            System.out.println("To: " + toStr);

            // T·∫°o response v·ªõi action "connect" ƒë·ªÉ k·∫øt n·ªëi cu·ªôc g·ªçi
            StringeeResponse response = StringeeResponse.builder()
                    .action("connect")
                    .from(UUID.fromString(fromStr))
                    .to(UUID.fromString(toStr))
                    .type("internal")
                    .build();

            List<StringeeResponse> responseList = List.of(response);
            System.out.println("Response: " + responseList);

            return ResponseEntity.ok()
                    .header("Content-Type", "application/json")
                    .body(responseList);

        } catch (Exception e) {
            System.err.println("Error processing answer URL: " + e.getMessage());
            e.printStackTrace();

            // Tr·∫£ v·ªÅ response reject n·∫øu c√≥ l·ªói
            StringeeResponse errorResponse = StringeeResponse.builder()
                    .action("reject")
                    .build();

            return ResponseEntity.ok()
                    .header("Content-Type", "application/json")
                    .body(List.of(errorResponse));
        }
    }

    @PostMapping("/event")
    public ResponseEntity<Map<String, String>> handleCallEvent(@RequestBody Map<String, Object> payload) {
        System.out.println("=== Stringee Event Called ===");
        System.out.println("Event payload: " + payload);

        String eventType = (String) payload.get("event");
        String callId = (String) payload.get("callId");

        System.out.println("Event Type: " + eventType);
        System.out.println("Call ID: " + callId);

        switch (eventType) {
            case "ringing":
                System.out.println("üìû Cu·ªôc g·ªçi ƒëang ƒë·ªï chu√¥ng - Call ID: " + callId);
                break;
            case "answered":
                System.out.println("‚úÖ Cu·ªôc g·ªçi ƒë∆∞·ª£c tr·∫£ l·ªùi - Call ID: " + callId);
                break;
            case "ended":
                System.out.println("üîö Cu·ªôc g·ªçi k·∫øt th√∫c - Call ID: " + callId);
                // C√≥ th·ªÉ l∆∞u th·ªëng k√™ cu·ªôc g·ªçi v√†o database ·ªü ƒë√¢y
                break;
            case "failed":
                System.out.println("‚ùå Cu·ªôc g·ªçi th·∫•t b·∫°i - Call ID: " + callId);
                break;
            case "busy":
                System.out.println("üìµ M√°y b·∫≠n - Call ID: " + callId);
                break;
            case "timeout":
                System.out.println("‚è∞ H·∫øt th·ªùi gian ch·ªù - Call ID: " + callId);
                break;
            default:
                System.out.println("‚ùì Event kh√¥ng x√°c ƒë·ªãnh: " + eventType + " - Call ID: " + callId);
        }

        // Tr·∫£ v·ªÅ response success
        return ResponseEntity.ok(Map.of("status", "success"));
    }
}